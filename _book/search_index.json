[["index.html", "Venn Diagram cookbook in R Chapter 1 Preface 1.1 Prerequisites 1.2 Sessioninfo", " Venn Diagram cookbook in R Chun-Hui Gao 2021-05-07 Chapter 1 Preface In this online book, I would like to compare the usage of several Venn Diagram tool in R environment. It is the investigation of these existing tools prompted me to develop a new tool ggVennDiagram. 1.1 Prerequisites List of packages VennDiagram colorfulVennPlot venn nVennR eulerr venneuler gplots ggVennDiagram ggvenn You need to install these packages. cran_packages &lt;- c(&quot;VennDiagram&quot;,&quot;colorfulVennPlot&quot;,&quot;gplots&quot;,&quot;venn&quot;, &quot;nVennR&quot;, &quot;eulerr&quot;,&quot;venneuler&quot;,&quot;ggVennDiagram&quot;) xfun::pkg_load2(cran_packages) # GitHub if (!requireNamespace(&quot;ggvenn&quot;)){ remotes::install_github(&quot;yanlinlin82/ggvenn&quot;) } 1.2 Sessioninfo sessionInfo() ## R version 4.0.4 (2021-02-15) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19041) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936 ## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] gtools_3.8.2 tidyselect_1.1.1 xfun_0.22 ## [4] venneuler_1.1-0 bslib_0.2.4 purrr_0.3.4 ## [7] rJava_0.9-13 colorspace_2.0-0 vctrs_0.3.8 ## [10] generics_0.1.0 htmltools_0.5.1.9000 yaml_2.2.1 ## [13] utf8_1.2.1 rlang_0.4.11 jquerylib_0.1.3 ## [16] pillar_1.6.0 DBI_1.1.0 RVenn_1.1.0 ## [19] glue_1.4.2 lambda.r_1.2.4 lifecycle_1.0.0 ## [22] stringr_1.4.0 munsell_0.5.0 gtable_0.3.0 ## [25] futile.logger_1.4.3 caTools_1.18.0 evaluate_0.14 ## [28] knitr_1.31 fansi_0.4.2 colorfulVennPlot_2.4 ## [31] Rcpp_1.0.6 KernSmooth_2.23-18 admisc_0.11 ## [34] ggVennDiagram_1.0.10 scales_1.1.1 formatR_1.7 ## [37] jsonlite_1.7.2 gplots_3.1.0 ggplot2_3.3.3 ## [40] digest_0.6.27 stringi_1.5.3 bookdown_0.21 ## [43] dplyr_1.0.5 grid_4.0.4 nVennR_0.2.3 ## [46] ggvenn_0.1.8 tools_4.0.4 bitops_1.0-6 ## [49] magrittr_2.0.1 eulerr_6.1.0 sass_0.3.1 ## [52] tibble_3.1.1 futile.options_1.0.1 venn_1.9 ## [55] crayon_1.4.1 pkgconfig_2.0.3 ellipsis_0.3.2 ## [58] assertthat_0.2.1 rmarkdown_2.7 rstudioapi_0.13 ## [61] R6_2.5.0 VennDiagram_1.6.20 compiler_4.0.4 "],["intro.html", "Chapter 2 Introduction 2.1 VennDiagram 2.2 colorfulVennPlot 2.3 venn 2.4 nVennR 2.5 eulerr 2.6 venneuler 2.7 RVenn 2.8 gplots 2.9 ggVennDiagram 2.10 ggvenn", " Chapter 2 Introduction Suppose we have a list of genes. genes &lt;- paste0(&quot;gene&quot;,1:1000) set.seed(20210302) gene_list &lt;- list(A = sample(genes,100), B = sample(genes,200), C = sample(genes,300), D = sample(genes,200)) library(dplyr) ## Warning: package &#39;dplyr&#39; was built under R version 4.0.5 2.1 VennDiagram VennDiagram (Chen 2018) is currently the most popular Venn plot tool in R environment. library(VennDiagram) VennDiagram &lt;- venn.diagram(x = gene_list, filename = NULL) cowplot::plot_grid(VennDiagram) It provide basic functions to draw Euler plot. venn.plot &lt;- draw.triple.venn( area1 = 65, area2 = 75, area3 = 85, n12 = 35, n23 = 15, n13 = 25, n123 = 5, category = c(&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;), fill = c(&quot;blue&quot;, &quot;red&quot;, &quot;green&quot;), lty = &quot;blank&quot;, cex = 2, cat.cex = 2, cat.col = c(&quot;blue&quot;, &quot;red&quot;, &quot;green&quot;), euler.d = TRUE ) cowplot::plot_grid(venn.plot) helper function to get Venn partitions. get.venn.partitions(gene_list) %&gt;% dplyr::as_tibble() ## # A tibble: 15 x 7 ## A B C D ..set.. ..values.. ..count.. ## &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;named list&gt; &lt;int&gt; ## 1 TRUE TRUE TRUE TRUE ABCD &lt;chr [1]&gt; 1 ## 2 FALSE TRUE TRUE TRUE (BCD)&lt;U+2216&gt;(A) &lt;chr [7]&gt; 7 ## 3 TRUE FALSE TRUE TRUE (ACD)&lt;U+2216&gt;(B) &lt;chr [2]&gt; 2 ## 4 FALSE FALSE TRUE TRUE (CD)&lt;U+2216&gt;(AB) &lt;chr [41]&gt; 41 ## 5 TRUE TRUE FALSE TRUE (ABD)&lt;U+2216&gt;(C) &lt;chr [5]&gt; 5 ## 6 FALSE TRUE FALSE TRUE (BD)&lt;U+2216&gt;(AC) &lt;chr [25]&gt; 25 ## 7 TRUE FALSE FALSE TRUE (AD)&lt;U+2216&gt;(BC) &lt;chr [12]&gt; 12 ## 8 FALSE FALSE FALSE TRUE (D)&lt;U+2216&gt;(ABC) &lt;chr [107]&gt; 107 ## 9 TRUE TRUE TRUE FALSE (ABC)&lt;U+2216&gt;(D) &lt;chr [5]&gt; 5 ## 10 FALSE TRUE TRUE FALSE (BC)&lt;U+2216&gt;(AD) &lt;chr [48]&gt; 48 ## 11 TRUE FALSE TRUE FALSE (AC)&lt;U+2216&gt;(BD) &lt;chr [22]&gt; 22 ## 12 FALSE FALSE TRUE FALSE (C)&lt;U+2216&gt;(ABD) &lt;chr [174]&gt; 174 ## 13 TRUE TRUE FALSE FALSE (AB)&lt;U+2216&gt;(CD) &lt;chr [10]&gt; 10 ## 14 FALSE TRUE FALSE FALSE (B)&lt;U+2216&gt;(ACD) &lt;chr [99]&gt; 99 ## 15 TRUE FALSE FALSE FALSE (A)&lt;U+2216&gt;(BCD) &lt;chr [43]&gt; 43 2.2 colorfulVennPlot (Noma and Manvae 2013) This package can specify the filled color for each region, but the first required parameter is a numeric vector of length 15, with specific names in suitable order, which makes it is very complicated to setup and use. Besides, the filled color need to be specified one by one, which is very complicated as well. library(colorfulVennPlot) Colors &lt;- c(&#39;red&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;pink&#39;, &#39;darkgreen&#39;,&#39;blue&#39;,&#39;lightblue&#39;,&#39;tan&#39;, &#39;yellowgreen&#39;,&#39;orange&#39;,&#39;purple&#39;,&#39;white&#39;,&#39;grey&#39;,&#39;plum&#39;,&#39;brown&#39;) regions &lt;- seq(15) names(regions) &lt;- c(&#39;1000&#39;, &#39;0100&#39;, &#39;1100&#39;, &#39;0010&#39;, &#39;1010&#39;, &#39;0110&#39;, &#39;1110&#39;, &#39;0001&#39;, &#39;1001&#39;, &#39;0101&#39;, &#39;1101&#39;, &#39;0011&#39;, &#39;1011&#39;, &#39;0111&#39;, &#39;1111&#39;) plotVenn4d(regions, Colors=Colors) 2.3 venn (Dusa 2020) Using venn is very simple. library(venn) venn(gene_list) venn also support different shapes. venn(x = gene_list, ellipse = TRUE) venn support ggplot, but it depends on ggpolypath, which is not popular. venn::venn(gene_list, ellipse = TRUE, ggplot = TRUE) venn plots Venn diagram up to 7 sets. venn::venn(5) venn::venn(6) venn::venn(7) venn accepts multiple format of input. intersections &lt;- c(&#39;~A~B~C~D&#39;, &#39;~A~B~CD&#39;, &#39;~A~BC~D&#39;, &#39;~A~BCD&#39;, &#39;~AB~C~D&#39;, &#39;~AB~CD&#39;, &#39;~ABC~D&#39;, &#39;~ABCD&#39;, &#39;A~B~C~D&#39;, &#39;A~B~CD&#39;, &#39;A~BC~D&#39;, &#39;A~BCD&#39;, &#39;AB~C~D&#39;, &#39;AB~CD&#39;, &#39;ABC~D&#39;, &#39;ABCD&#39;) venn(intersections, zcol = colors()[sample(1:657, 16)]) venn(&quot;A*D, A*B*~C + B*C*~D&quot;, zcol = c(&quot;blue&quot;, &quot;red&quot;)) venn(&quot;AD, AB~C + BC~D&quot;, zcol = c(&quot;blue&quot;, &quot;red&quot;)) venn(&quot;1-----&quot;) venn(&quot;100 + 110 + 101 + 111&quot;) 2.4 nVennR nVennR provides an interface for the nVenn algorithm (Pérez-Silva, Araujo-Voces, and Quesada 2018). This algorithm works for any number of sets, and usually yields pleasing and informative Venn diagrams with proportionality information. library(nVennR) myNV &lt;- plotVenn(gene_list) cat(myNV$svg) 43 (1) 10 (1, 2) 5 (1, 2, 3) 1 (1, 2, 3, 4) 99 (2) 48 (2, 3) 7 (2, 3, 4) 25 (2, 4) 174 (3) 22 (1, 3) 2 (1, 3, 4) 41 (3, 4) 107 (4) 12 (1, 4) 5 (1, 2, 4) A B C D 2.5 eulerr (Larsson 2020) eulerr generates area-proportional euler diagrams that display set relationships (intersections, unions, and disjoints) with circles or ellipses. Unlike Venn diagrams, which show all possible relations between different sets, the Euler diagram shows only relevant relationships. Venn diagrams are a more restrictive form of Euler diagrams. A Venn diagram must contain all \\(2^n\\) logically possible zones of overlap between its \\(n\\) curves, representing all combinations of inclusion/exclusion of its constituent sets. library(eulerr) venn_plot &lt;- venn(gene_list) plot(venn_plot) euler_plot &lt;- euler(gene_list) plot(euler_plot) At the time of March 9th, 2021, it is possible to provide input to eulerr as either a named numeric vector with set combinations as disjoint set combinations or unions (depending on how the argument type is set in euler()), a matrix or data frame of logicals with columns representing sets and rows the set relationships for each observation, a list of sample spaces, or a table. # Input as a matrix of logicals set.seed(1) mat &lt;- cbind( A = sample(c(TRUE, TRUE, FALSE), 50, TRUE), B = sample(c(TRUE, FALSE), 50, TRUE), C = sample(c(TRUE, FALSE, FALSE, FALSE), 50, TRUE) ) (fit2 &lt;- euler(mat)) ## original fitted residuals regionError ## A 13 13 0 0.008 ## B 4 4 0 0.002 ## C 0 0 0 0.000 ## A&amp;B 17 17 0 0.010 ## A&amp;C 5 5 0 0.003 ## B&amp;C 1 0 1 0.024 ## A&amp;B&amp;C 2 2 0 0.001 ## ## diagError: 0.024 ## stress: 0.002 The diagnose function is good. error_plot(fit2) 2.6 venneuler (Wilkinson 2011) venneulerr depends on JAVA runtime environment, which makes its installation is unbearable for non-JAVA users. Besides, it only has one exported function, which doesn’t support list input. library(venneuler) combinations &lt;- c(A=0.3, B=0.3, C=1.1, &quot;A&amp;B&quot;=0.1, &quot;A&amp;C&quot;=0.2, &quot;B&amp;C&quot;=0.1 ,&quot;A&amp;B&amp;C&quot;=0.1) vd &lt;- venneuler(combinations) plot(vd) 2.7 RVenn (Akyol 2019) RVenn is a package for dealing with multiple sets, while the base R functions (intersect, union and setdiff) only work with two sets. The functions overlap, unite and discern abstract away the details, so one can just construct the universe and choose the sets to operate by index or set name. RVenn provide a ggvenn() function to draw 2-3 sets Venn diagram. In this case, its advantages are mostly rely on set operation functions. library(RVenn) ggvenn(Venn(gene_list[1:3])) 2.8 gplots (Warnes et al. 2020) gplots provides various R programming tools for plotting data. It supports Venn plot up to five sets. library(gplots) venn(gene_list) 2.9 ggVennDiagram (Gao 2021) library(ggVennDiagram) ggVennDiagram(gene_list) 2.10 ggvenn (Yan 2021) library(ggvenn) ## Warning: package &#39;ggplot2&#39; was built under R version 4.0.5 ggvenn(gene_list) ggvenn can show elements in polygon regions. a &lt;- list(A = c(&quot;apple&quot;, &quot;pear&quot;, &quot;peach&quot;), B = c(&quot;apple&quot;, &quot;lemon&quot;)) ggvenn(a, show_elements = TRUE) ggvenn(a, show_elements = TRUE, label_sep = &quot;\\n&quot;) # show elements in line "],["using-ggVennDiagram.html", "Chapter 3 Using ggVennDiagram 3.1 long category names 3.2 Show intersection values 3.3 Setting set label 3.4 Setting region label 3.5 Setting set edges 3.6 Changing palette 3.7 Adding note 3.8 Comprehensive customization by using helper functions", " Chapter 3 Using ggVennDiagram Generate example data. genes &lt;- paste0(&quot;gene&quot;,1:1000) set.seed(20210302) gene_list &lt;- list(A = sample(genes,100), B = sample(genes,200), C = sample(genes,300), D = sample(genes,200)) library(ggVennDiagram) 3.1 long category names If you use long category names in Venn plot, labels may be cropped by plot borders. To avoid this, just use a ggplot trick to expand x axis. p1 &lt;- ggVennDiagram(gene_list, category.names = c(&quot;a very long name&quot;,&quot;short name&quot;,&quot;name&quot;,&quot;another name&quot;)) p1 # expand axis to show long set labels p1 + scale_x_continuous(expand = expansion(mult = .2)) 3.2 Show intersection values When intersection values only have several members, ggVennDiagram is efficient to show the values in places. set.seed(0) small_list &lt;- lapply(sample(6:10, size = 4), function(x){ sample(letters,x) }) ggVennDiagram(small_list, category.names = LETTERS[1:4], show_intersect = TRUE) ## Warning: Ignoring unknown aesthetics: text 3.3 Setting set label 3.3.1 color of set label ggVennDiagram(gene_list, set_color = c(&quot;blue&quot;,&quot;black&quot;,&quot;red&quot;,&quot;green&quot;)) 3.3.2 size of set labels ggVennDiagram(gene_list, set_size = 8) 3.4 Setting region label 3.4.1 text content ggVennDiagram(gene_list, label = &quot;count&quot;) ggVennDiagram(gene_list, label = &quot;percent&quot;) 3.4.2 percentage digits ggVennDiagram(gene_list, label_percent_digit = 1, label = &quot;percent&quot;) 3.4.3 remove label background Method 1: set alpha to 0 ggVennDiagram(gene_list, label_alpha = 0) - Method 2: use geom_text() ggVennDiagram(gene_list, label_geom = &quot;text&quot;) 3.4.4 color and size ggVennDiagram(gene_list, label_color = &quot;firebrick&quot;, label_size = 4) 3.5 Setting set edges ggVennDiagram(gene_list, edge_lty = &quot;dashed&quot;, edge_size = 1) 3.6 Changing palette changing fill palette library(ggplot2) p &lt;- ggVennDiagram(gene_list) # Red Blue p + scale_fill_distiller(palette = &quot;RdBu&quot;) # Reds p + scale_fill_distiller(palette = &quot;Reds&quot;, direction = 1) change edge colors p + scale_color_brewer(palette = &quot;Set1&quot;) Some other palletes are: RColorBrewer::display.brewer.all() 3.7 Adding note p + labs(title = &quot;Four sets Venn Diagram&quot;, subtitle = &quot;generated by `ggVennDiagram`&quot;, caption = Sys.Date()) 3.8 Comprehensive customization by using helper functions The main function ggVennDiagram() accepts a list input, and output a ggplot object. By measuring the length of input list, it automatically applies internal functions to build a plot in two steps: data preparation and visualization. Data preparation was packaged into one function process_data(). Its output is a S4 VennPlotData class object, which contains three slots, setEdge, setLabel and region. These slot data then can be further plotted with ggplot functions. See below for a better understanding. venn &lt;- Venn(gene_list) data &lt;- process_data(venn) ggplot() + # 1. region count layer geom_sf(aes(fill = count), data = venn_region(data)) + # 2. set edge layer geom_sf(aes(color = id), data = venn_setedge(data), show.legend = FALSE) + # 3. set label layer geom_sf_text(aes(label = name), data = venn_setlabel(data)) + # 4. region label layer geom_sf_label(aes(label = count), data = venn_region(data)) + theme_void() ggVennDiagram export functions to get these data, and they can be used for comprehensive customization in user-side. Venn(): Venn object constructor, use this to construct a Venn object from list. process_data(): process data with a Venn object venn_region(): get region data to plot venn_setedge(): get setedge data to plot venn_setlabel(): get setlabel data to plot For example, you may change edge/fill/label properties as you will. ggplot() + # change mapping of color filling geom_sf(aes(fill = id), data = venn_region(data), show.legend = FALSE) + # adjust edge size and color geom_sf(color=&quot;grey&quot;, size = 3, data = venn_setedge(data), show.legend = FALSE) + # show set label in bold geom_sf_text(aes(label = name), fontface = &quot;bold&quot;, data = venn_setlabel(data)) + # add a alternative region name geom_sf_label(aes(label = name), data = venn_region(data), alpha = 0.5) + theme_void() "],["methods.html", "Chapter 4 Methods 4.1 Predefined sysdata in venn 4.2 Set operation in RVenn", " Chapter 4 Methods ggVennDiagram is built on the shoulder of the other related R packages. Except for ggplot2, it also depends on the functions in dplyr, tibble, sf, and so on. Besides, the design of ggVennDiagram version 1.0 is inspired by two packages, venn and RVenn. 4.1 Predefined sysdata in venn venn::venn() support Venn diagram up to 7 sets. It use predefined values to plot polygons. library(dplyr) sets &lt;- venn:::sets glimpse(sets) ## Rows: 9,536 ## Columns: 5 ## $ s &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,~ ## $ v &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,~ ## $ n &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,~ ## $ x &lt;dbl&gt; 500.000, 493.573, 487.185, 480.838, 474.533, 468.273, 462.059, 455.8~ ## $ y &lt;dbl&gt; 750.000, 749.918, 749.673, 749.267, 748.703, 747.982, 747.106, 746.0~ s: number of sets; v: whether it is for ellipse; n: No. of polygons; The following is a visualization of venn predefined polygons. These polygons can’t be generated using simple functions, but are painstaking manual work that took years to create. I have communicated with the author of venn, Prof. Adrian Dușa, and get his consent to reuse these data. library(ggplot2) ggplot(sets, aes(x,y)) + geom_polygon(aes(color=factor(n)),alpha=1/5) + facet_grid(v~s) + coord_fixed() + theme_void() + theme(legend.position = &quot;none&quot;) In ggVennDiagram, we also store a predefined shapes in sysdata, and this will no doubt improve shape generations in user-side. You may navigate the shape data with get_shape_data() function. ggVennDiagram::get_shape_data(4) ## # A tibble: 8 x 6 ## nsets type shape_id component id xy ## &lt;dbl&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;list&gt; ## 1 4 ellipse 401f setEdge 1 &lt;dbl[,2] [101 x 2]&gt; ## 2 4 ellipse 401f setEdge 2 &lt;dbl[,2] [101 x 2]&gt; ## 3 4 ellipse 401f setEdge 3 &lt;dbl[,2] [101 x 2]&gt; ## 4 4 ellipse 401f setEdge 4 &lt;dbl[,2] [101 x 2]&gt; ## 5 4 ellipse 401f setLabel 1 &lt;dbl[,2] [1 x 2]&gt; ## 6 4 ellipse 401f setLabel 2 &lt;dbl[,2] [1 x 2]&gt; ## 7 4 ellipse 401f setLabel 3 &lt;dbl[,2] [1 x 2]&gt; ## 8 4 ellipse 401f setLabel 4 &lt;dbl[,2] [1 x 2]&gt; or plot them with plot_shapes(). plot_shapes() 4.2 Set operation in RVenn RVenn defines a S4 class object Venn to store members of Venn sets. library(purrr) library(RVenn) library(ggplot2) ggVennDiagram(gene_list) Construct the Venn object. toy &lt;- Venn(gene_list) glimpse(toy) ## Formal class &#39;Venn&#39; [package &quot;RVenn&quot;] with 2 slots ## ..@ sets :List of 4 ## .. ..$ A: chr [1:100] &quot;gene284&quot; &quot;gene106&quot; &quot;gene712&quot; &quot;gene905&quot; ... ## .. ..$ B: chr [1:200] &quot;gene403&quot; &quot;gene644&quot; &quot;gene438&quot; &quot;gene29&quot; ... ## .. ..$ C: chr [1:300] &quot;gene27&quot; &quot;gene788&quot; &quot;gene287&quot; &quot;gene361&quot; ... ## .. ..$ D: chr [1:200] &quot;gene601&quot; &quot;gene165&quot; &quot;gene479&quot; &quot;gene390&quot; ... ## ..@ names: chr [1:4] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; On this basis, it implements methods to calculate the intersection/overlapping/union of different sets. 4.2.1 Set operations in RVenn Intersection # intersection overlap(toy) ## [1] &quot;gene757&quot; overlap(toy, slice = 1:3) ## [1] &quot;gene876&quot; &quot;gene405&quot; &quot;gene361&quot; &quot;gene63&quot; &quot;gene679&quot; &quot;gene757&quot; overlap(toy, slice = c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;)) ## [1] &quot;gene876&quot; &quot;gene405&quot; &quot;gene361&quot; &quot;gene63&quot; &quot;gene679&quot; &quot;gene757&quot; Union unite(toy) %&gt;% sort() ## [1] &quot;gene1&quot; &quot;gene10&quot; &quot;gene101&quot; &quot;gene102&quot; &quot;gene103&quot; &quot;gene104&quot; &quot;gene105&quot; ## [8] &quot;gene106&quot; &quot;gene107&quot; &quot;gene110&quot; &quot;gene112&quot; &quot;gene114&quot; &quot;gene115&quot; &quot;gene116&quot; ## [15] &quot;gene117&quot; &quot;gene118&quot; &quot;gene120&quot; &quot;gene121&quot; &quot;gene122&quot; &quot;gene125&quot; &quot;gene126&quot; ## [22] &quot;gene127&quot; &quot;gene131&quot; &quot;gene133&quot; &quot;gene134&quot; &quot;gene136&quot; &quot;gene138&quot; &quot;gene140&quot; ## [29] &quot;gene141&quot; &quot;gene145&quot; &quot;gene146&quot; &quot;gene147&quot; &quot;gene148&quot; &quot;gene150&quot; &quot;gene153&quot; ## [36] &quot;gene155&quot; &quot;gene16&quot; &quot;gene161&quot; &quot;gene163&quot; &quot;gene164&quot; &quot;gene165&quot; &quot;gene166&quot; ## [43] &quot;gene167&quot; &quot;gene168&quot; &quot;gene169&quot; &quot;gene17&quot; &quot;gene171&quot; &quot;gene173&quot; &quot;gene174&quot; ## [50] &quot;gene176&quot; &quot;gene177&quot; &quot;gene18&quot; &quot;gene180&quot; &quot;gene182&quot; &quot;gene183&quot; &quot;gene187&quot; ## [57] &quot;gene188&quot; &quot;gene189&quot; &quot;gene19&quot; &quot;gene195&quot; &quot;gene196&quot; &quot;gene197&quot; &quot;gene198&quot; ## [64] &quot;gene199&quot; &quot;gene2&quot; &quot;gene20&quot; &quot;gene201&quot; &quot;gene203&quot; &quot;gene206&quot; &quot;gene207&quot; ## [71] &quot;gene208&quot; &quot;gene209&quot; &quot;gene21&quot; &quot;gene212&quot; &quot;gene213&quot; &quot;gene214&quot; &quot;gene215&quot; ## [78] &quot;gene217&quot; &quot;gene218&quot; &quot;gene219&quot; &quot;gene22&quot; &quot;gene220&quot; &quot;gene223&quot; &quot;gene224&quot; ## [85] &quot;gene226&quot; &quot;gene227&quot; &quot;gene23&quot; &quot;gene230&quot; &quot;gene234&quot; &quot;gene235&quot; &quot;gene237&quot; ## [92] &quot;gene238&quot; &quot;gene241&quot; &quot;gene244&quot; &quot;gene245&quot; &quot;gene246&quot; &quot;gene247&quot; &quot;gene249&quot; ## [99] &quot;gene25&quot; &quot;gene250&quot; ## [ reached getOption(&quot;max.print&quot;) -- omitted 501 entries ] Set difference discern(toy, slice1 = 1:3) %&gt;% sort() ## [1] &quot;gene101&quot; &quot;gene104&quot; &quot;gene106&quot; &quot;gene107&quot; &quot;gene110&quot; &quot;gene112&quot; &quot;gene114&quot; ## [8] &quot;gene115&quot; &quot;gene116&quot; &quot;gene117&quot; &quot;gene118&quot; &quot;gene121&quot; &quot;gene122&quot; &quot;gene126&quot; ## [15] &quot;gene127&quot; &quot;gene133&quot; &quot;gene134&quot; &quot;gene136&quot; &quot;gene138&quot; &quot;gene140&quot; &quot;gene141&quot; ## [22] &quot;gene146&quot; &quot;gene147&quot; &quot;gene148&quot; &quot;gene150&quot; &quot;gene153&quot; &quot;gene155&quot; &quot;gene16&quot; ## [29] &quot;gene161&quot; &quot;gene163&quot; &quot;gene164&quot; &quot;gene166&quot; &quot;gene167&quot; &quot;gene171&quot; &quot;gene174&quot; ## [36] &quot;gene176&quot; &quot;gene177&quot; &quot;gene18&quot; &quot;gene182&quot; &quot;gene183&quot; &quot;gene188&quot; &quot;gene19&quot; ## [43] &quot;gene197&quot; &quot;gene198&quot; &quot;gene199&quot; &quot;gene2&quot; &quot;gene20&quot; &quot;gene201&quot; &quot;gene209&quot; ## [50] &quot;gene21&quot; &quot;gene212&quot; &quot;gene213&quot; &quot;gene214&quot; &quot;gene215&quot; &quot;gene217&quot; &quot;gene219&quot; ## [57] &quot;gene223&quot; &quot;gene224&quot; &quot;gene226&quot; &quot;gene227&quot; &quot;gene23&quot; &quot;gene230&quot; &quot;gene234&quot; ## [64] &quot;gene235&quot; &quot;gene238&quot; &quot;gene246&quot; &quot;gene25&quot; &quot;gene250&quot; &quot;gene251&quot; &quot;gene252&quot; ## [71] &quot;gene253&quot; &quot;gene254&quot; &quot;gene255&quot; &quot;gene263&quot; &quot;gene267&quot; &quot;gene268&quot; &quot;gene270&quot; ## [78] &quot;gene272&quot; &quot;gene275&quot; &quot;gene277&quot; &quot;gene278&quot; &quot;gene279&quot; &quot;gene28&quot; &quot;gene281&quot; ## [85] &quot;gene284&quot; &quot;gene287&quot; &quot;gene289&quot; &quot;gene29&quot; &quot;gene293&quot; &quot;gene295&quot; &quot;gene297&quot; ## [92] &quot;gene298&quot; &quot;gene302&quot; &quot;gene303&quot; &quot;gene304&quot; &quot;gene305&quot; &quot;gene309&quot; &quot;gene31&quot; ## [99] &quot;gene310&quot; &quot;gene312&quot; ## [ reached getOption(&quot;max.print&quot;) -- omitted 301 entries ] discern(toy, slice1 = 1:2, slice2 = 3:4) %&gt;% sort() ## [1] &quot;gene101&quot; &quot;gene104&quot; &quot;gene106&quot; &quot;gene112&quot; &quot;gene115&quot; &quot;gene122&quot; &quot;gene133&quot; ## [8] &quot;gene134&quot; &quot;gene136&quot; &quot;gene146&quot; &quot;gene148&quot; &quot;gene161&quot; &quot;gene163&quot; &quot;gene164&quot; ## [15] &quot;gene167&quot; &quot;gene174&quot; &quot;gene176&quot; &quot;gene177&quot; &quot;gene18&quot; &quot;gene183&quot; &quot;gene188&quot; ## [22] &quot;gene19&quot; &quot;gene197&quot; &quot;gene2&quot; &quot;gene209&quot; &quot;gene213&quot; &quot;gene217&quot; &quot;gene223&quot; ## [29] &quot;gene226&quot; &quot;gene227&quot; &quot;gene238&quot; &quot;gene246&quot; &quot;gene251&quot; &quot;gene253&quot; &quot;gene267&quot; ## [36] &quot;gene268&quot; &quot;gene284&quot; &quot;gene29&quot; &quot;gene293&quot; &quot;gene303&quot; &quot;gene305&quot; &quot;gene314&quot; ## [43] &quot;gene316&quot; &quot;gene319&quot; &quot;gene32&quot; &quot;gene327&quot; &quot;gene328&quot; &quot;gene348&quot; &quot;gene349&quot; ## [50] &quot;gene363&quot; &quot;gene364&quot; &quot;gene365&quot; &quot;gene373&quot; &quot;gene384&quot; &quot;gene386&quot; &quot;gene391&quot; ## [57] &quot;gene400&quot; &quot;gene401&quot; &quot;gene403&quot; &quot;gene411&quot; &quot;gene416&quot; &quot;gene420&quot; &quot;gene424&quot; ## [64] &quot;gene425&quot; &quot;gene428&quot; &quot;gene43&quot; &quot;gene431&quot; &quot;gene435&quot; &quot;gene436&quot; &quot;gene438&quot; ## [71] &quot;gene444&quot; &quot;gene458&quot; &quot;gene474&quot; &quot;gene475&quot; &quot;gene493&quot; &quot;gene5&quot; &quot;gene50&quot; ## [78] &quot;gene500&quot; &quot;gene523&quot; &quot;gene530&quot; &quot;gene564&quot; &quot;gene566&quot; &quot;gene570&quot; &quot;gene574&quot; ## [85] &quot;gene575&quot; &quot;gene580&quot; &quot;gene584&quot; &quot;gene588&quot; &quot;gene592&quot; &quot;gene597&quot; &quot;gene614&quot; ## [92] &quot;gene626&quot; &quot;gene631&quot; &quot;gene650&quot; &quot;gene657&quot; &quot;gene662&quot; &quot;gene663&quot; &quot;gene680&quot; ## [99] &quot;gene693&quot; &quot;gene695&quot; ## [ reached getOption(&quot;max.print&quot;) -- omitted 52 entries ] In ggVennDiagram, region value calculation depends on the RVenn package and new functions written on its defined Venn object. There are totally \\(2^n–1\\) regions in a Venn diagram, in which \\(n\\) is the number of sets. We developed discern_overlap() to calculate the members of every Venn regions. By default, it will return the intersection of all the sets, which only contains one gene here. discern_overlap(toy) ## [1] &quot;gene757&quot; discern_overlap(toy, slice = 1:2) ## [1] &quot;gene712&quot; &quot;gene133&quot; &quot;gene931&quot; &quot;gene213&quot; &quot;gene747&quot; &quot;gene597&quot; &quot;gene268&quot; ## [8] &quot;gene871&quot; &quot;gene197&quot; &quot;gene136&quot; We construct a Polygon object that inherits Venn to store shape data. And expanded discern_overlap() method to calculate region shapes. After calculation, the member and count of each region are stored with region ids in a tibble, and then joined with the region shape object by unique ids. Likewise, the member and count of sets are assigned to the SetEdge by unique ids in parallel. By doing this, a complete VennPlotData object is finished and can be used for plotting. "],["applications.html", "Chapter 5 Applications of Venn, Euler and Upset plot", " Chapter 5 Applications of Venn, Euler and Upset plot To date, there are three major methods to display set relationships, Venn diagram, Euler diagram and UpSet plot (Conway, Lex, and Gehlenborg 2017). The UpSet plot is a state-of-art visualization technique for the quantitative analysis of sets (Lex et al. 2014), and support unlimited number of sets. When the number of sets is very large, UpSet plot is more reasonable be choose. By contrast, Venn and Euler are both traditional approaches to finish this task. Euler diagram is area-proportional, and only show relevant relationships. Since human eye is less sensitive to area than to color, we believe that using color filling to show the difference between different regions is more suitable for ordinary biomedical studies. For example, ggVennDiagram support Venn plot up to 7 sets. genes &lt;- paste0(&quot;gene&quot;,1:1000) set.seed(20210507) x &lt;- list(A = sample(genes,100), B = sample(genes,150), C = sample(genes,200), D = sample(genes,250), E = sample(genes,300), F = sample(genes,350), G = sample(genes,400)) but if we plot them, we will find it is difficult to separate the border of different sets in the plot (even with thick edges), especially for 7 and 6 sets Venn. ggVennDiagram(x, label = &quot;none&quot;, edge_size = 2) + scale_fill_distiller(palette = &quot;RdBu&quot;) ggVennDiagram(x[1:6], label = &quot;none&quot;, edge_size = 2) + scale_fill_distiller(palette = &quot;RdBu&quot;) ggVennDiagram(x[1:5], label = &quot;none&quot;, edge_size = 2) + scale_fill_distiller(palette = &quot;RdBu&quot;) By contrast, if we apply this large x to upset(), it will get: library(UpSetR) upset(fromList(x), nsets = 7) In my opinion, this plot is better to show the intersection values between them. "],["conclusion.html", "Chapter 6 Conclusion", " Chapter 6 Conclusion Venn diagrams are widely-used diagrams to show the intersection values in biomedical studies. Despite several tools exist to draw Venn diagram in the R environment, the demand for a better one is unlimited. In this context, we developed ggVennDiagram, an R package that enable the automated Venn diagram generation in publication quality. ggVennDiagram is built with the merits of ggplot2, and integrates the advantages of existing packages such as VennDiagram, RVenn, venn, and sf. As a result, ggVennDiagram not only develops the method of plotting a Venn diagram, but also designs a comprehensive object that stores the complete data for a Venn diagram. ggVennDiagram is currently support 2-7 sets Venn diagram. Satisfactory results can be obtained with minimal configurations. However, it also provides highly customizable drawing method without increasing the cost of learning. The package is an open-source software that released under the GPL-3 license, and it is freely available through CRAN (https://cran.r-project.org/package=ggVennDiagram) or GitHub (https://github.com/gaospecial/ggVennDiagram). "],["references.html", "References", " References Akyol, Turgut Yigit. 2019. RVenn: Set Operations for Many Sets. https://CRAN.R-project.org/package=RVenn. Chen, Hanbo. 2018. VennDiagram: Generate High-Resolution Venn and Euler Plots. https://CRAN.R-project.org/package=VennDiagram. Conway, Jake R, Alexander Lex, and Nils Gehlenborg. 2017. “UpSetR: An R Package for the Visualization of Intersecting Sets and Their Properties.” Bioinformatics 33 (18): 2938–40. https://doi.org/10.1093/bioinformatics/btx364. Dusa, Adrian. 2020. Venn: Draw Venn Diagrams. https://CRAN.R-project.org/package=venn. Gao, Chun-Hui. 2021. ggVennDiagram: A Ggplot2 Implement of Venn Diagram. https://github.com/gaospecial/ggVennDiagram. Larsson, Johan. 2020. Eulerr: Area-Proportional Euler and Venn Diagrams with Ellipses. https://CRAN.R-project.org/package=eulerr. Lex, A., N. Gehlenborg, H. Strobelt, R. Vuillemot, and H. Pfister. 2014. “UpSet: Visualization of Intersecting Sets.” IEEE Transactions on Visualization and Computer Graphics 20 (12): 1983–92. https://doi.org/10.1109/TVCG.2014.2346248. Noma, Elliot, and Aliona Manvae. 2013. colorfulVennPlot: Plot and Add Custom Coloring to Venn Diagrams for 2-Dimensional, 3-Dimensional and 4-Dimensional Data. https://CRAN.R-project.org/package=colorfulVennPlot. Pérez-Silva, José G., Miguel Araujo-Voces, and Víctor Quesada. 2018. “nVenn: Generalized, Quasi-Proportional Venn and Euler Diagrams.” Bioinformatics (Oxford, England) 34 (13): 2322–24. https://doi.org/10.1093/bioinformatics/bty109. Warnes, Gregory R., Ben Bolker, Lodewijk Bonebakker, Robert Gentleman, Wolfgang Huber, Andy Liaw, Thomas Lumley, et al. 2020. Gplots: Various r Programming Tools for Plotting Data. https://github.com/talgalili/gplots. Wilkinson, Lee. 2011. Venneuler: Venn and Euler Diagrams. https://CRAN.R-project.org/package=venneuler. Yan, Linlin. 2021. Ggvenn: Draw Venn Diagram by Ggplot2. "]]
