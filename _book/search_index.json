[["index.html", "ggVennDiagram cookbook Chapter 1 Prerequisites 1.1 List of packages 1.2 Sessioninfo", " ggVennDiagram cookbook Chun-Hui Gao 2021-04-21 Chapter 1 Prerequisites 1.1 List of packages VennDiagram colorfulVennPlot venn nVennR eulerr venneuler gplots ggVennDiagram You need to install these packages. cran_packages &lt;- c(&quot;VennDiagram&quot;,&quot;colorfulVennPlot&quot;,&quot;gplots&quot;,&quot;venn&quot;, &quot;nVennR&quot;, &quot;eulerr&quot;,&quot;venneuler&quot;,&quot;ggVennDiagram&quot;) xfun::pkg_load2(cran_packages) 1.2 Sessioninfo sessionInfo() ## R version 4.0.4 (2021-02-15) ## Platform: x86_64-w64-mingw32/x64 (64-bit) ## Running under: Windows 10 x64 (build 19041) ## ## Matrix products: default ## ## locale: ## [1] LC_COLLATE=Chinese (Simplified)_China.936 ## [2] LC_CTYPE=Chinese (Simplified)_China.936 ## [3] LC_MONETARY=Chinese (Simplified)_China.936 ## [4] LC_NUMERIC=C ## [5] LC_TIME=Chinese (Simplified)_China.936 ## ## attached base packages: ## [1] stats graphics grDevices utils datasets methods base ## ## loaded via a namespace (and not attached): ## [1] Rcpp_1.0.5 pillar_1.4.6 compiler_4.0.4 ## [4] nVennR_0.2.3 formatR_1.7 futile.logger_1.4.3 ## [7] venneuler_1.1-0 bitops_1.0-6 futile.options_1.0.1 ## [10] tools_4.0.4 digest_0.6.27 tibble_3.0.4 ## [13] evaluate_0.14 lifecycle_0.2.0 gtable_0.3.0 ## [16] pkgconfig_2.0.3 rlang_0.4.10 rstudioapi_0.13 ## [19] yaml_2.2.1 ggVennDiagram_1.0.5 VennDiagram_1.6.20 ## [22] xfun_0.19 rJava_0.9-13 dplyr_1.0.2 ## [25] stringr_1.4.0 knitr_1.30 generics_0.1.0 ## [28] vctrs_0.3.4 admisc_0.11 gtools_3.8.2 ## [31] caTools_1.18.0 tidyselect_1.1.0 grid_4.0.4 ## [34] colorfulVennPlot_2.4 glue_1.4.2 R6_2.5.0 ## [37] rmarkdown_2.5 bookdown_0.21 RVenn_1.1.0 ## [40] purrr_0.3.4 ggplot2_3.3.2 lambda.r_1.2.4 ## [43] eulerr_6.1.0 magrittr_2.0.1 ellipsis_0.3.1 ## [46] gplots_3.1.0 scales_1.1.1 htmltools_0.5.1.1 ## [49] colorspace_2.0-0 KernSmooth_2.23-18 stringi_1.5.3 ## [52] munsell_0.5.0 crayon_1.3.4 venn_1.9 "],["intro.html", "Chapter 2 Introduction 2.1 VennDiagram 2.2 colorfulVennPlot 2.3 venn 2.4 nVennR 2.5 eulerr 2.6 venneuler 2.7 RVenn 2.8 gplots 2.9 ggVennDiagram", " Chapter 2 Introduction Suppose we have a list of genes. genes &lt;- paste0(&quot;gene&quot;,1:1000) set.seed(20210302) gene_list &lt;- list(A = sample(genes,100), B = sample(genes,200), C = sample(genes,300), D = sample(genes,200)) library(dplyr) 2.1 VennDiagram VennDiagram (Chen 2018) is currently the most popular Venn plot tool in R environment. library(VennDiagram) VennDiagram &lt;- venn.diagram(x = gene_list, filename = NULL) cowplot::plot_grid(VennDiagram) It provide basic functions to draw Euler plot. venn.plot &lt;- draw.triple.venn( area1 = 65, area2 = 75, area3 = 85, n12 = 35, n23 = 15, n13 = 25, n123 = 5, category = c(&quot;First&quot;, &quot;Second&quot;, &quot;Third&quot;), fill = c(&quot;blue&quot;, &quot;red&quot;, &quot;green&quot;), lty = &quot;blank&quot;, cex = 2, cat.cex = 2, cat.col = c(&quot;blue&quot;, &quot;red&quot;, &quot;green&quot;), euler.d = TRUE ) cowplot::plot_grid(venn.plot) helper function to get Venn partitions. get.venn.partitions(gene_list) %&gt;% dplyr::as_tibble() ## # A tibble: 15 x 7 ## A B C D ..set.. ..values.. ..count.. ## &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;lgl&gt; &lt;chr&gt; &lt;named list&gt; &lt;int&gt; ## 1 TRUE TRUE TRUE TRUE ABCD &lt;chr [1]&gt; 1 ## 2 FALSE TRUE TRUE TRUE (BCD)&lt;U+2216&gt;(A) &lt;chr [7]&gt; 7 ## 3 TRUE FALSE TRUE TRUE (ACD)&lt;U+2216&gt;(B) &lt;chr [2]&gt; 2 ## 4 FALSE FALSE TRUE TRUE (CD)&lt;U+2216&gt;(AB) &lt;chr [41]&gt; 41 ## 5 TRUE TRUE FALSE TRUE (ABD)&lt;U+2216&gt;(C) &lt;chr [5]&gt; 5 ## 6 FALSE TRUE FALSE TRUE (BD)&lt;U+2216&gt;(AC) &lt;chr [25]&gt; 25 ## 7 TRUE FALSE FALSE TRUE (AD)&lt;U+2216&gt;(BC) &lt;chr [12]&gt; 12 ## 8 FALSE FALSE FALSE TRUE (D)&lt;U+2216&gt;(ABC) &lt;chr [107]&gt; 107 ## 9 TRUE TRUE TRUE FALSE (ABC)&lt;U+2216&gt;(D) &lt;chr [5]&gt; 5 ## 10 FALSE TRUE TRUE FALSE (BC)&lt;U+2216&gt;(AD) &lt;chr [48]&gt; 48 ## 11 TRUE FALSE TRUE FALSE (AC)&lt;U+2216&gt;(BD) &lt;chr [22]&gt; 22 ## 12 FALSE FALSE TRUE FALSE (C)&lt;U+2216&gt;(ABD) &lt;chr [174]&gt; 174 ## 13 TRUE TRUE FALSE FALSE (AB)&lt;U+2216&gt;(CD) &lt;chr [10]&gt; 10 ## 14 FALSE TRUE FALSE FALSE (B)&lt;U+2216&gt;(ACD) &lt;chr [99]&gt; 99 ## 15 TRUE FALSE FALSE FALSE (A)&lt;U+2216&gt;(BCD) &lt;chr [43]&gt; 43 2.2 colorfulVennPlot (Noma and Manvae 2013) This package can specify the filled color for each region, but the first required parameter is a numeric vector of length 15, with specific names in suitable order, which makes it is very complicated to setup and use. Besides, the filled color need to be specified one by one, which is very complicated as well. library(colorfulVennPlot) Colors &lt;- c(&#39;red&#39;, &#39;yellow&#39;, &#39;green&#39;, &#39;pink&#39;, &#39;darkgreen&#39;,&#39;blue&#39;,&#39;lightblue&#39;,&#39;tan&#39;, &#39;yellowgreen&#39;,&#39;orange&#39;,&#39;purple&#39;,&#39;white&#39;,&#39;grey&#39;,&#39;plum&#39;,&#39;brown&#39;) regions &lt;- seq(15) names(regions) &lt;- c(&#39;1000&#39;, &#39;0100&#39;, &#39;1100&#39;, &#39;0010&#39;, &#39;1010&#39;, &#39;0110&#39;, &#39;1110&#39;, &#39;0001&#39;, &#39;1001&#39;, &#39;0101&#39;, &#39;1101&#39;, &#39;0011&#39;, &#39;1011&#39;, &#39;0111&#39;, &#39;1111&#39;) plotVenn4d(regions, Colors=Colors) 2.3 venn (Dusa 2020) Using venn is very simple. library(venn) venn(gene_list) venn also support different shapes. venn(x = gene_list, ellipse = TRUE) venn support ggplot, but it depends on ggpolypath, which is not popular. venn::venn(gene_list, ellipse = TRUE, ggplot = TRUE) venn plots Venn diagram up to 7 sets. venn::venn(5) venn::venn(6) venn::venn(7) venn accepts multiple format of input. intersections &lt;- c(&#39;~A~B~C~D&#39;, &#39;~A~B~CD&#39;, &#39;~A~BC~D&#39;, &#39;~A~BCD&#39;, &#39;~AB~C~D&#39;, &#39;~AB~CD&#39;, &#39;~ABC~D&#39;, &#39;~ABCD&#39;, &#39;A~B~C~D&#39;, &#39;A~B~CD&#39;, &#39;A~BC~D&#39;, &#39;A~BCD&#39;, &#39;AB~C~D&#39;, &#39;AB~CD&#39;, &#39;ABC~D&#39;, &#39;ABCD&#39;) venn(intersections, zcol = colors()[sample(1:657, 16)]) venn(&quot;A*D, A*B*~C + B*C*~D&quot;, zcol = c(&quot;blue&quot;, &quot;red&quot;)) venn(&quot;AD, AB~C + BC~D&quot;, zcol = c(&quot;blue&quot;, &quot;red&quot;)) venn(&quot;1-----&quot;) venn(&quot;100 + 110 + 101 + 111&quot;) 2.4 nVennR nVennR provides an interface for the nVenn algorithm (Pérez-Silva, Araujo-Voces, and Quesada 2018). This algorithm works for any number of sets, and usually yields pleasing and informative Venn diagrams with proportionality information. library(nVennR) myNV &lt;- plotVenn(gene_list) cat(myNV$svg) 43 (1) 10 (1, 2) 5 (1, 2, 3) 1 (1, 2, 3, 4) 99 (2) 48 (2, 3) 7 (2, 3, 4) 25 (2, 4) 174 (3) 22 (1, 3) 2 (1, 3, 4) 41 (3, 4) 107 (4) 12 (1, 4) 5 (1, 2, 4) A B C D 2.5 eulerr (Larsson 2020) eulerr generates area-proportional euler diagrams that display set relationships (intersections, unions, and disjoints) with circles or ellipses. Unlike Venn diagrams, which show all possible relations between different sets, the Euler diagram shows only relevant relationships. Venn diagrams are a more restrictive form of Euler diagrams. A Venn diagram must contain all \\(2^n\\) logically possible zones of overlap between its \\(n\\) curves, representing all combinations of inclusion/exclusion of its constituent sets. library(eulerr) venn_plot &lt;- venn(gene_list) plot(venn_plot) euler_plot &lt;- euler(gene_list) plot(euler_plot) At the time of March 9th, 2021, it is possible to provide input to eulerr as either a named numeric vector with set combinations as disjoint set combinations or unions (depending on how the argument type is set in euler()), a matrix or data frame of logicals with columns representing sets and rows the set relationships for each observation, a list of sample spaces, or a table. # Input as a matrix of logicals set.seed(1) mat &lt;- cbind( A = sample(c(TRUE, TRUE, FALSE), 50, TRUE), B = sample(c(TRUE, FALSE), 50, TRUE), C = sample(c(TRUE, FALSE, FALSE, FALSE), 50, TRUE) ) (fit2 &lt;- euler(mat)) ## original fitted residuals regionError ## A 13 13 0 0.008 ## B 4 4 0 0.002 ## C 0 0 0 0.000 ## A&amp;B 17 17 0 0.010 ## A&amp;C 5 5 0 0.003 ## B&amp;C 1 0 1 0.024 ## A&amp;B&amp;C 2 2 0 0.001 ## ## diagError: 0.024 ## stress: 0.002 The diagnose function is good. error_plot(fit2) 2.6 venneuler (Wilkinson 2011) venneulerr depends on JAVA runtime environment, which makes its installation is unbearable for non-JAVA users. Besides, it only has one exported function, which doesn’t support list input. library(venneuler) combinations &lt;- c(A=0.3, B=0.3, C=1.1, &quot;A&amp;B&quot;=0.1, &quot;A&amp;C&quot;=0.2, &quot;B&amp;C&quot;=0.1 ,&quot;A&amp;B&amp;C&quot;=0.1) vd &lt;- venneuler(combinations) plot(vd) 2.7 RVenn (Akyol 2019) RVenn is a package for dealing with multiple sets, while the base R functions (intersect, union and setdiff) only work with two sets. The functions overlap, unite and discern abstract away the details, so one can just construct the universe and choose the sets to operate by index or set name. RVenn provide a ggvenn() function to draw 2-3 sets Venn diagram. In this case, its advantages are mostly rely on set operation functions. library(RVenn) ggvenn(Venn(gene_list[1:3])) 2.8 gplots (Warnes et al. 2020) gplots provides various R programming tools for plotting data. It supports Venn plot up to five sets. library(gplots) venn(gene_list) 2.9 ggVennDiagram (Gao 2020) library(ggVennDiagram) ggVennDiagram(gene_list) "],["using-ggVennDiagram.html", "Chapter 3 Using ggVennDiagram 3.1 Changing palette 3.2 Adding note 3.3 Axis expansion 3.4 Show intersection values 3.5 Comprehensive customization by using helper functions", " Chapter 3 Using ggVennDiagram Generate example data. genes &lt;- paste0(&quot;gene&quot;,1:1000) set.seed(20210302) gene_list &lt;- list(A = sample(genes,100), B = sample(genes,200), C = sample(genes,300), D = sample(genes,200)) library(ggVennDiagram) p &lt;- ggVennDiagram(gene_list) 3.1 Changing palette changing fill palette library(ggplot2) # Red Blue p + scale_fill_distiller(palette = &quot;RdBu&quot;) # Reds p + scale_fill_distiller(palette = &quot;Reds&quot;, direction = 1) change edge colors p + scale_color_brewer(palette = &quot;Set1&quot;) Some other palletes are: RColorBrewer::display.brewer.all() 3.2 Adding note p + labs(title = &quot;Four sets Venn Diagram&quot;, subtitle = &quot;generated by `ggVennDiagram`&quot;, caption = Sys.Date()) 3.3 Axis expansion p1 &lt;- ggVennDiagram(gene_list, category.names = c(&quot;a very long name&quot;,&quot;short name&quot;,&quot;name&quot;,&quot;another name&quot;)) p1 # expand axis to show long set labels p1 + scale_x_continuous(expand = expansion(mult = .2)) 3.4 Show intersection values When intersection values only have several members, ggVennDiagram is efficient to show the values in places. set.seed(0) small_list &lt;- lapply(sample(5:10, replace = TRUE, size = 4), function(x){ sample(letters,x) }) ggVennDiagram(small_list, category.names = LETTERS[1:4], show_intersect = TRUE) 3.5 Comprehensive customization by using helper functions The main function ggVennDiagram() accepts a list input, and output a ggplot object. By measuring the length of input list, it automatically applies internal functions to build a plot in two steps: data preparation and visualization. Data preparation was packaged into one function process_data(). Its output is a S4 VennPlotData class object, which contains three slots, setEdge, setLabel and region. These slot data can be further plotted with ggplot functions. See below for a better understanding. venn &lt;- Venn(gene_list) data &lt;- process_data(venn) ggplot() + # 1. region count layer geom_sf(aes(fill = count), data = data@region) + # 2. set edge layer geom_sf(aes(color = id), data = data@setEdge, show.legend = FALSE) + # 3. set label layer geom_sf_text(aes(label = name), data = data@setLabel) + # 4. region label layer geom_sf_label(aes(label = count), data = data@region) + theme_void() ggVennDiagram export multiple functions, and they can be used for comprehensive customization. For example, you may change edge/fill/label properties as you will. ggplot() + # change mapping of color filling geom_sf(aes(fill = id), data = data@region, show.legend = FALSE) + # adjust edge size and color geom_sf(color=&quot;grey&quot;, size = 3, data = data@setEdge, show.legend = FALSE) + # show set label in bold geom_sf_text(aes(label = name), fontface = &quot;bold&quot;, data = data@setLabel) + # add a alternative region name geom_sf_label(aes(label = name), data = data@region, alpha = 0.5) + theme_void() "],["methods.html", "Chapter 4 Methods 4.1 Predefined sysdata in venn 4.2 Set operation in RVenn", " Chapter 4 Methods 4.1 Predefined sysdata in venn venn::venn() support Venn diagram up to 7 sets. It use predefined values to plot polygons. library(dplyr) sets &lt;- venn:::sets glimpse(sets) ## Rows: 9,536 ## Columns: 5 ## $ s &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... ## $ v &lt;int&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,... ## $ n &lt;int&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,... ## $ x &lt;dbl&gt; 500.000, 493.573, 487.185, 480.838, 474.533, 468.273, 462.059, 45... ## $ y &lt;dbl&gt; 750.000, 749.918, 749.673, 749.267, 748.703, 747.982, 747.106, 74... s: number of sets; v: whether it is for ellipse; n: No. of polygons; library(ggplot2) ggplot(sets, aes(x,y)) + geom_polygon(aes(color=factor(n)),alpha=1/5) + facet_grid(v~s) + coord_fixed() + theme_void() + theme(legend.position = &quot;none&quot;) 4.2 Set operation in RVenn library(purrr) library(RVenn) library(ggplot2) set.seed(42) toy &lt;- map(sample(5:25, replace = FALSE, size = 10), function(x) sort(sample(letters, size = x))) toy[1:3] ## [[1]] ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;v&quot; &quot;x&quot; ## [20] &quot;y&quot; &quot;z&quot; ## ## [[2]] ## [1] &quot;d&quot; &quot;h&quot; &quot;k&quot; &quot;m&quot; &quot;o&quot; &quot;r&quot; &quot;u&quot; &quot;v&quot; &quot;x&quot; ## ## [[3]] ## [1] &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;r&quot; Construct the Venn object toy &lt;- Venn(toy) glimpse(toy) ## Formal class &#39;Venn&#39; [package &quot;RVenn&quot;] with 2 slots ## ..@ sets :List of 10 ## .. ..$ Set_1 : chr [1:21] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; ... ## .. ..$ Set_2 : chr [1:9] &quot;d&quot; &quot;h&quot; &quot;k&quot; &quot;m&quot; ... ## .. ..$ Set_3 : chr [1:5] &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; ... ## .. ..$ Set_4 : chr [1:14] &quot;b&quot; &quot;c&quot; &quot;f&quot; &quot;g&quot; ... ## .. ..$ Set_5 : chr [1:8] &quot;a&quot; &quot;d&quot; &quot;e&quot; &quot;g&quot; ... ## .. ..$ Set_6 : chr [1:6] &quot;c&quot; &quot;i&quot; &quot;k&quot; &quot;l&quot; ... ## .. ..$ Set_7 : chr [1:22] &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; ... ## .. ..$ Set_8 : chr [1:23] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;e&quot; ... ## .. ..$ Set_9 : chr [1:12] &quot;a&quot; &quot;e&quot; &quot;f&quot; &quot;k&quot; ... ## .. ..$ Set_10: chr [1:11] &quot;b&quot; &quot;f&quot; &quot;o&quot; &quot;p&quot; ... ## ..@ names: chr [1:10] &quot;Set_1&quot; &quot;Set_2&quot; &quot;Set_3&quot; &quot;Set_4&quot; ... 4.2.1 Set operations in RVenn Intersection # intersection overlap(toy) ## character(0) overlap(toy, slice = 1:3) ## [1] &quot;d&quot; &quot;r&quot; overlap(toy, slice = c(&quot;Set_1&quot;,&quot;Set_2&quot;,&quot;Set_5&quot;)) ## [1] &quot;d&quot; &quot;h&quot; &quot;m&quot; Union unite(toy) %&gt;% sort() ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;f&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; ## [20] &quot;t&quot; &quot;u&quot; &quot;v&quot; &quot;w&quot; &quot;x&quot; &quot;y&quot; &quot;z&quot; unite(toy, slice = 1:3) %&gt;% sort() ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;m&quot; &quot;n&quot; &quot;o&quot; &quot;p&quot; &quot;q&quot; &quot;r&quot; &quot;s&quot; &quot;t&quot; &quot;u&quot; &quot;v&quot; ## [20] &quot;x&quot; &quot;y&quot; &quot;z&quot; Set difference discern(toy, slice1 = 1:9) %&gt;% sort() ## [1] &quot;a&quot; &quot;c&quot; &quot;d&quot; &quot;e&quot; &quot;g&quot; &quot;h&quot; &quot;i&quot; &quot;j&quot; &quot;k&quot; &quot;l&quot; &quot;m&quot; &quot;n&quot; &quot;w&quot; &quot;x&quot; &quot;z&quot; discern(toy, slice1 = 1, slice2 = 2) %&gt;% sort() ## [1] &quot;a&quot; &quot;b&quot; &quot;c&quot; &quot;e&quot; &quot;i&quot; &quot;j&quot; &quot;n&quot; &quot;p&quot; &quot;q&quot; &quot;s&quot; &quot;t&quot; &quot;y&quot; &quot;z&quot; discern(toy, slice1 = 1:7, slice2 = 8:9) %&gt;% sort() ## [1] &quot;d&quot; "],["applications.html", "Chapter 5 Applications 5.1 Example one 5.2 Example two", " Chapter 5 Applications Some significant applications are demonstrated in this chapter. 5.1 Example one 5.2 Example two "],["final-words.html", "Chapter 6 Final Words", " Chapter 6 Final Words We have finished a nice book. "],["references.html", "References", " References Akyol, Turgut Yigit. 2019. RVenn: Set Operations for Many Sets. https://CRAN.R-project.org/package=RVenn. Chen, Hanbo. 2018. VennDiagram: Generate High-Resolution Venn and Euler Plots. https://CRAN.R-project.org/package=VennDiagram. Dusa, Adrian. 2020. Venn: Draw Venn Diagrams. https://CRAN.R-project.org/package=venn. Gao, Chun-Hui. 2020. ggVennDiagram: A Ggplot2 Implement of Venn Diagram. https://github.com/gaospecial/ggVennDiagram. Larsson, Johan. 2020. Eulerr: Area-Proportional Euler and Venn Diagrams with Ellipses. https://CRAN.R-project.org/package=eulerr. Noma, Elliot, and Aliona Manvae. 2013. colorfulVennPlot: Plot and Add Custom Coloring to Venn Diagrams for 2-Dimensional, 3-Dimensional and 4-Dimensional Data. https://CRAN.R-project.org/package=colorfulVennPlot. Pérez-Silva, José G., Miguel Araujo-Voces, and Víctor Quesada. 2018. “nVenn: Generalized, Quasi-Proportional Venn and Euler Diagrams.” Bioinformatics (Oxford, England) 34 (13): 2322–24. https://doi.org/10.1093/bioinformatics/bty109. Warnes, Gregory R., Ben Bolker, Lodewijk Bonebakker, Robert Gentleman, Wolfgang Huber, Andy Liaw, Thomas Lumley, et al. 2020. Gplots: Various r Programming Tools for Plotting Data. https://github.com/talgalili/gplots. Wilkinson, Lee. 2011. Venneuler: Venn and Euler Diagrams. https://CRAN.R-project.org/package=venneuler. "]]
